num_added = 0
while (num_added < non_amy_num) {
samp_row <- sample(non_amyloids, 1)
append(K_fold, samp_row$protein)
num_added = num_added + samp_row$gram_total
}
append(folds, K_fold)
}
return(folds)
}
train_test_generator(0.5, train_index, 2)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num = as.numeric(amy_num / amy_fraction)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
print(non_amy_num)
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added = 0
while ( num_added < non_amy_num == TRUE) {
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num = as.numeric(amy_num / amy_fraction)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
print(non_amy_num)
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added = 0
while ( num_added < non_amy_num ) {
samp_row <- sample(non_amyloids, 1)
append(K_fold, samp_row$protein)
num_added = num_added + samp_row$gram_total
}
append(folds, K_fold)
}
return(folds)
}
train_test_generator(0.5, train_index, 2)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num <- as.numeric(amy_num / amy_fraction)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
print(non_amy_num)
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added <- 0
while ( num_added < non_amy_num ) {
samp_row <- sample(non_amyloids, 1)
append(K_fold, samp_row$protein)
num_added = num_added + samp_row$gram_total
}
append(folds, K_fold)
}
return(folds)
}
train_test_generator(0.5, train_index, 2)
train_test_generator(0.5, train_index, 2)
train_test_generator(0.5, train_index, 2)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num <- as.numeric(amy_num / amy_fraction)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
print(non_amy_num)
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added <- 0
while ( num_added < non_amy_num ) {
samp_row <- sample(non_amyloids, 1)
append(K_fold, samp_row$protein[[0]])
num_added = num_added + samp_row$gram_total[[0]]
}
append(folds, K_fold)
}
return(folds)
}
train_test_generator(0.5, train_index, 2)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num <- as.numeric(amy_num / amy_fraction)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
print(non_amy_num)
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added <- 0
while ( num_added < non_amy_num ) {
samp_row <- sample(non_amyloids, 1)
print(samp_row)
append(K_fold, samp_row$protein[[0]])
num_added = num_added + samp_row$gram_total[[0]]
}
append(folds, K_fold)
}
return(folds)
}
train_test_generator(0.5, train_index, 2)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num <- as.numeric(amy_num / amy_fraction)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
print(non_amy_num)
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added <- 0
while ( num_added < non_amy_num ) {
samp_row <- sample(non_amyloids, 1)
print(samp_row)
append(K_fold, samp_row$protein[[0]])
num_added = num_added + samp_row$gram_total[[0]]
}
append(folds, K_fold)
}
return(folds)
}
train_test_generator(0.5, train_index, 2)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num <- as.numeric(amy_num / amy_fraction)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
print(non_amy_num)
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added <- 0
while ( num_added < non_amy_num ) {
samp_row <- sample(non_amyloids, 1)
print(samp_row$protein, samp_row$gram_total)
append(K_fold, samp_row$protein)
num_added = num_added + samp_row$gram_total
}
append(folds, K_fold)
}
return(folds)
}
train_test_generator(0.5, train_index, 2)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num <- as.numeric(amy_num / amy_fraction)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
print(non_amy_num)
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added <- 0
while ( num_added < non_amy_num ) {
samp_row <- sample(non_amyloids, 1)
print(samp_row$gram_total)
append(K_fold, samp_row$protein)
num_added = num_added + samp_row$gram_total
}
append(folds, K_fold)
}
return(folds)
}
train_test_generator(0.5, train_index, 2)
train_test_generator(0.5, train_index, 2)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num <- as.numeric(amy_num / amy_fraction)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
print(non_amy_num)
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added <- 0
while ( num_added < non_amy_num ) {
samp_row <- sample(non_amyloids, 1)
print(samp_row$gram_total)
append(K_fold, samp_row$protein)
num_added = num_added + 100#samp_row$gram_total
}
append(folds, K_fold)
}
return(folds)
}
train_test_generator(0.5, train_index, 2)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num <- as.numeric(amy_num / amy_fraction)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
print(non_amy_num)
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added <- 0
while ( num_added < non_amy_num ) {
samp_row <- sample(non_amyloids, 1)
print(samp_row$gram_total)
append(K_fold, samp_row$protein)
num_added = num_added + 5000#samp_row$gram_total
}
append(folds, K_fold)
}
return(folds)
}
train_test_generator(0.5, train_index, 2)
View(train_index)
na_count <-sapply(x, function(y) sum(length(which(is.na(y)))))
na_count <-sapply(train_index, function(y) sum(length(which(is.na(y)))))
na_count_res <- data.frame(na_count)
View(na_count_res)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num <- as.numeric(amy_num / amy_fraction)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
print(non_amy_num)
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added <- 0
while ( num_added < non_amy_num ) {
samp_row <- sample(non_amyloids, 1)
print(samp_row$gram_total)
if (is.null(samp_row$gram_total) | is.null(samp_row$protein)){
next
} else {
append(K_fold, samp_row$protein)
num_added = num_added + samp_row$gram_total
}
}
append(folds, K_fold)
}
return(folds)
}
train_test_generator(0.5, train_index, 2)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num <- as.numeric(amy_num / amy_fraction)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
print(non_amy_num)
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added <- 0
while ( num_added < non_amy_num ) {
samp_row <- sample(non_amyloids, 1)
if (is.null(samp_row$gram_total) | is.null(samp_row$protein)){
next
} else {
append(K_fold, samp_row$protein)
num_added = num_added + samp_row$gram_total
}
}
append(folds, K_fold)
}
return(folds)
}
train_folds <- train_test_generator(0.5, train_index, 2)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num <- as.numeric(amy_num / amy_fraction)
print(non_amy_num)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added <- 0
while ( num_added < non_amy_num ) {
samp_row <- sample(non_amyloids, 1)
if (is.null(samp_row$gram_total) | is.null(samp_row$protein)){
next
} else {
append(K_fold, samp_row$protein)
num_added = num_added + samp_row$gram_total
print(num_added)
}
}
append(folds, K_fold)
}
return(folds)
}
train_folds <- train_test_generator(0.5, train_index, 2)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num <- as.numeric(amy_num / amy_fraction)
print(non_amy_num)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added <- 0
while ( num_added < non_amy_num ) {
samp_row <- sample(non_amyloids, 1)
if (is.null(samp_row$gram_total) | is.null(samp_row$protein)){
print("Next!")
next
} else {
append(K_fold, samp_row$protein)
num_added = num_added + samp_row$gram_total
print(num_added)
}
}
append(folds, K_fold)
}
return(folds)
}
train_folds <- train_test_generator(0.5, train_index, 2)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num <- as.numeric(amy_num / amy_fraction)
print(non_amy_num)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added <- 0
while ( num_added < non_amy_num ) {
samp_row <- sample(non_amyloids, 1)
print(samp_row)
if (is.null(samp_row$gram_total) | is.null(samp_row$protein)){
print("Next!")
next
} else {
append(K_fold, samp_row$protein)
num_added = num_added + samp_row$gram_total
print(num_added)
}
}
append(folds, K_fold)
}
return(folds)
}
train_folds <- train_test_generator(0.5, train_index, 2)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
# Get the size of each "chunk"
amy_num <- sum(filter(index, amyloid==1)$gram_total)
non_amy_num <- as.numeric(amy_num / amy_fraction)
print(non_amy_num)
non_amyloids <- filter(index, amyloid==0)
# Now get the proteins which will populate the train sets
folds <- c()
for (i in range(1,K)){
K_fold <- c()
num_added <- 0
while ( num_added < non_amy_num ) {
samp_row = sample(non_amyloids, 1)
print(samp_row)
if (is.null(samp_row$gram_total) | is.null(samp_row$protein)){
next
} else {
append(K_fold, samp_row$protein)
num_added = num_added + samp_row$gram_total
print(num_added)
}
}
append(folds, K_fold)
}
return(folds)
}
train_folds <- train_test_generator(0.5, train_index, 2)
# amy_fraction : 1 == equivalent, 0.5 == non_amyloid is twice as large, 1.5 == non_amyloid is half as large.
# return a list of lists that contains the proteins and gram_nums of each "chunk" of data there are to grab.
# This sampling will replace for ease of implementation.
train_test_generator <- function(amy_fraction, index, K){
#install.packages("RSQLite")
#install.packages("dplyr")
#install.packages("BiocManager")
#BiocManager::install("biomaRt")
#library(biomaRt)
library(dplyr)
library(DBI)
#library(mygene)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(),dbname="D:/GitHub/BMIN503_Final_Project/protein_training.db")
dbListTables(con)
# Make index on protein, gram_num directly on sqlite - "CREATE INDEX n_gram_index ON train (protein, gram_num);"
train_index <- dbGetQuery(con, "SELECT protein, COUNT(gram_num) as gram_total FROM train GROUP BY protein")
# Get list of amyloids to map with
y <- dbGetQuery(con, "SELECT * FROM amyloid")
# add amyloid information to train_index
train_index <- merge(y, train_index, on="protein", how="left")
na_count <-sapply(train_index, function(y) sum(length(which(is.na(y)))))
na_count_res <- data.frame(na_count)
amy_str <- toString(sprintf("'%s'", amyloids$protein))
train_base_query <- paste("SELECT * FROM train WHERE protein in (",amy_str,")")
amyloids <- filter(train_index, amyloid==0)
amy_str <- toString(sprintf("'%s'", amyloids$protein))
train_base_query <- paste("SELECT * FROM train WHERE protein in (",amy_str,")")
train_base = dbGetQuery(con, train_base_query)
#install.packages("RSQLite")
#install.packages("dplyr")
#install.packages("BiocManager")
#BiocManager::install("biomaRt")
#library(biomaRt)
library(dplyr)
library(DBI)
#library(mygene)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(),dbname="D:/GitHub/BMIN503_Final_Project/protein_training.db")
dbListTables(con)
# Make index on protein, gram_num directly on sqlite - "CREATE INDEX n_gram_index ON train (protein, gram_num);"
train_index <- dbGetQuery(con, "SELECT protein, COUNT(gram_num) as gram_total FROM train GROUP BY protein")
# Get list of amyloids to map with
y <- dbGetQuery(con, "SELECT * FROM amyloid")
# add amyloid information to train_index
train_index <- merge(y, train_index, on="protein", how="left")
na_count <-sapply(train_index, function(y) sum(length(which(is.na(y)))))
na_count_res <- data.frame(na_count)
amyloids <- filter(train_index, amyloid==0)
amy_str <- toString(sprintf("'%s'", amyloids$protein))
train_base_query <- paste("SELECT * FROM train WHERE protein in (",amy_str,")")
train_base = dbGetQuery(con, train_base_query)
#install.packages("RSQLite")
#install.packages("dplyr")
#install.packages("BiocManager")
#BiocManager::install("biomaRt")
#library(biomaRt)
library(dplyr)
library(DBI)
#library(mygene)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(),dbname="D:/GitHub/BMIN503_Final_Project/protein_training.db")
dbListTables(con)
# Make index on protein, gram_num directly on sqlite - "CREATE INDEX n_gram_index ON train (protein, gram_num);"
train_index <- dbGetQuery(con, "SELECT protein, COUNT(gram_num) as gram_total FROM train GROUP BY protein")
# Get list of amyloids to map with
y <- dbGetQuery(con, "SELECT * FROM amyloid")
# add amyloid information to train_index
train_index <- merge(y, train_index, on="protein", how="left")
na_count <-sapply(train_index, function(y) sum(length(which(is.na(y)))))
na_count_res <- data.frame(na_count)
amyloids <- filter(train_index, amyloid==0)
amy_str <- toString(sprintf("'%s'", amyloids$protein))
train_base_query <- paste("SELECT * FROM train WHERE protein in (",amy_str,")")
train_base = dbGetQuery(con, train_base_query)
amyloids <- filter(train_index, amyloid==0)
amy_str <- toString(sprintf("'%s'", amyloids$protein))
train_base_query <- paste("SELECT * FROM train WHERE protein in (",amy_str,")")
train_base = dbGetQuery(con, train_base_query)
