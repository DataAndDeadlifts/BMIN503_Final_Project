percent_bach = round((bach_est/bach_tot)*100,2)) %>%   # multiply by 100 to get rate as a percentage
select(GEOID, NAME, bach_est, bach_tot, percent_bach) %>%
unique()
#acs.data$NAME.full <- acs.data$NAME
#acs.data <- subset(acs.data, select=-c(NAME))
# Check that all counties are only present once
nrow(filter(summarize(group_by(percent.bachelors, NAME), n=n()), n>1))==0
head(percent.bachelors)
# Paste the leading num to my geo ids
percent.bachelors$GEO_ID <- as.character(paste(leading_num, percent.bachelors$GEOID, sep=""))
counties.acs <- right_join(
percent.bachelors,
counties,
by="GEO_ID"
)
head(counties.acs)
pal_fun.acs <- colorQuantile(palette = "BrBG", domain=counties.acs$estimate, n = 10, reverse = F)
# Pop-up message
pu_message.acs <- paste0(counties.acs$NAME.full,
" <br>Percentage holding Bachelor's Degree: ",
counties.acs$percent_bach
)
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$percent_bach),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~percent_bach,
title = "Bachelor's degree attainment (percentage)<br>for the Population 25 and over, 2016",
opacity = 1) %>%
addScaleBar()
pal_fun.acs <- colorQuantile(palette = "BrBG", domain=counties.acs$estimate, n = 10, reverse = F)
# Pop-up message
pu_message.acs <- paste0(counties.acs$NAME,
" <br>Percentage holding Bachelor's Degree: ",
counties.acs$percent_bach
)
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$percent_bach),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~percent_bach,
title = "Bachelor's degree attainment (percentage)<br>for the Population 25 and over, 2016",
opacity = 1) %>%
addScaleBar()
View(counties.acs)
pal_fun.acs <- colorQuantile(palette = "BrBG", domain=counties.acs$estimate, n = 10, reverse = F)
# Pop-up message
pu_message.acs <- paste0(counties.acs$NAME.x,
" <br>Percentage holding Bachelor's Degree: ",
counties.acs$percent_bach
)
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$percent_bach),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~percent_bach,
title = "Bachelor's degree attainment (percentage)<br>for the Population 25 and over, 2016",
opacity = 1) %>%
addScaleBar()
pal_fun.acs <- colorQuantile(palette = "BrBG", domain=counties.acs$percent_bach, n = 10, reverse = F)
# Pop-up message
pu_message.acs <- paste0(counties.acs$NAME.x,
" <br>Percentage holding Bachelor's Degree: ",
counties.acs$percent_bach
)
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$percent_bach),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~percent_bach,
title = "Bachelor's degree attainment (percentage)<br>for the Population 25 and over, 2016",
opacity = 1) %>%
addScaleBar()
# Paste the leading num to my geo ids
percent.bachelors$GEO_ID <- as.character(paste(leading_num, percent.bachelors$GEOID, sep=""))
counties.acs <- right_join(
percent.bachelors,
counties,
by="GEO_ID"
)
head(counties.acs)
# Paste the leading num to my geo ids
percent.bachelors$GEO_ID <- as.character(paste(leading_num, percent.bachelors$GEOID, sep=""))
counties.acs <- right_join(
percent.bachelors,
counties,
by="GEO_ID"
)
head(counties.acs)
View(percent.bachelors)
#EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER (Bachelor's Degree)
filter(vars, name=="B15003_022")$concept
get_acs(geography = "county", variables = "B15003_022")
acs.data <- get_acs(dataset="acs", geography = "county", year=2016, variables = c("B15003_001","B15003_022"))#, GEOID, NAME, estimate)
# Percent bachelor
percent.bachelors <- acs.data %>%
group_by(GEOID) %>%  # return only one row per GEOID
mutate(bach_est = estimate[variable == "B15003_022"],  # extract and rename number of people that have achieved a bachelor's
bach_tot = estimate[variable == "B15003_001"],  # extract and rename total number of people surveyed
percent_bach = round((bach_est/bach_tot)*100,2)) %>%   # multiply by 100 to get rate as a percentage
select(GEOID, NAME, bach_est, bach_tot, percent_bach) %>%
unique()
#acs.data$NAME.full <- acs.data$NAME
#acs.data <- subset(acs.data, select=-c(NAME))
# Check that all counties are only present once
nrow(filter(summarize(group_by(percent.bachelors, NAME), n=n()), n>1))==0
head(percent.bachelors)
knit_with_parameters('D:/GitHub/2018-Fall_BMIN-503/Assignments/05/Assignment5_Bergren.Rmd')
unlink('D:/GitHub/2018-Fall_BMIN-503/Assignments/05/Assignment5_Bergren_cache', recursive = TRUE)
update.packages("pandoc")
update.packages("pandoc")
update.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("pandoc")
#install.packages('tidyselect')
#install.packages('tidyverse')
#install.packages('sf')
#install.packages('tidycensus')
#install.packages('leaflet')
library(tidyverse)
library(sf)
library(tidycensus)
library(leaflet)
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
library(dplyr)
library(ggplot2)
obesity <- read.csv(url("https://raw.githubusercontent.com/HimesGroup/BMIN503/master/DataFiles/county_obesity_prevalence.csv"), stringsAsFactors = FALSE)
obesity$age.adjusted.percent.2004 <- as.double(obesity$age.adjusted.percent.2004)
obesity$age.adjusted.percent.2014 <- as.double(obesity$age.adjusted.percent.2014)
counties <- readRDS(gzcon(url("https://raw.githubusercontent.com/HimesGroup/BMIN503/master/DataFiles/uscounties_2010.rds")))
counties$GEO_ID <- as.character(counties$GEO_ID)
counties.geo <- st_geometry(counties)
plot(counties.geo)
leading_num <- "0500000US"
# OJ county, CA
cali.oj <- filter(obesity, state=="California", county=="Orange County")
cali.oj.geoid <- paste(leading_num, formatC(select(cali.oj, fips.code), width=5, format="d", flag="0"), sep="")
# OJ county, TX
texa.oj <- filter(obesity, state=="Texas", county=="Orange County")
texa.oj.geoid <- paste(leading_num, formatC(select(texa.oj, fips.code), width=5, format="d", flag="0"), sep="")
# BRFSS
cali.oj
texa.oj
# County Polygons
# I know the NAME is overkill, just showing that its 'mappable' from dataset to dataset
filter(counties, GEO_ID==cali.oj.geoid, NAME=="Orange")
filter(counties, GEO_ID==texa.oj.geoid, NAME=="Orange")
# Adding GeoID column to obesity
GEOID_format_func <- function(x) paste(leading_num, formatC(x, width=5, format="d", flag="0"), sep="")
obesity$GEO_ID <- as.character(lapply(obesity$fips.code, GEOID_format_func))
counties_merged <- left_join(counties, select(obesity, state, GEO_ID, age.adjusted.percent.2004, age.adjusted.percent.2014, county))
library(RColorBrewer)
# Use a fixed color scale to more easily and compare obesity rates between maps
prev_min <- min(pmin(counties_merged$age.adjusted.percent.2004,counties_merged$age.adjusted.percent.2014),na.rm=T)
prev_max <- max(pmax(counties_merged$age.adjusted.percent.2004, counties_merged$age.adjusted.percent.2014),na.rm=T)
my_theme <- function() {
theme_minimal() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_line(color = "white"),
legend.key.size = unit(0.8, "cm"),
legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
plot.title = element_text(size = 22))
}
myPalette <- colorRampPalette(brewer.pal(9, "YlOrRd"))
# Replace "..." with your code
ggplot() +
ggtitle("2004 Obesity Rates") +
geom_sf(data = counties_merged, aes(fill = as.numeric(age.adjusted.percent.2004)), lwd = 0) +
my_theme() +
scale_fill_gradientn(name = "Obesity rate (%)", colours = myPalette(100),
limit = range(prev_min, prev_max))
ggplot() +
ggtitle("2014 Obesity Rates") +
geom_sf(data = counties_merged, aes(fill = as.numeric(age.adjusted.percent.2014)), lwd = 0) +
my_theme() +
scale_fill_gradientn(name = "Obesity rate (%)", colours = myPalette(100),
limit = range(prev_min, prev_max))
counties_merged$age.adjusted.percent.change <- (counties_merged$age.adjusted.percent.2014 - counties_merged$age.adjusted.percent.2004)
census_api_key("955a82713a4dbf05229b834cc070c79fcc5acb04", install=TRUE, overwrite=TRUE)
readRenviron("~/.Renviron")
vars <- load_variables(year = 2016, "acs5")
#EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER (Bachelor's Degree)
filter(vars, name=="B15003_022")$concept
get_acs(geography = "county", variables = "B15003_022")
acs.data <- get_acs(dataset="acs", geography = "county", year=2016, variables = c("B15003_001","B15003_022"))#, GEOID, NAME, estimate)
# Percent bachelor
percent.bachelors <- acs.data %>%
group_by(GEOID) %>%  # return only one row per GEOID
mutate(bach_est = estimate[variable == "B15003_022"],  # extract and rename number of people that have achieved a bachelor's
bach_tot = estimate[variable == "B15003_001"],  # extract and rename total number of people surveyed
percent_bach = round((bach_est/bach_tot)*100,2)) %>%   # multiply by 100 to get rate as a percentage
select(GEOID, NAME, bach_est, bach_tot, percent_bach) %>%
unique()
#acs.data$NAME.full <- acs.data$NAME
#acs.data <- subset(acs.data, select=-c(NAME))
# Check that all counties are only present once
nrow(filter(summarize(group_by(percent.bachelors, NAME), n=n()), n>1))==0
head(percent.bachelors)
# Paste the leading num to my geo ids
percent.bachelors$GEO_ID <- as.character(paste(leading_num, percent.bachelors$GEOID, sep=""))
counties.acs <- right_join(
percent.bachelors,
counties,
by="GEO_ID"
)
head(counties.acs)
pal_fun.acs <- colorQuantile(palette = "BrBG", domain=counties.acs$percent_bach, n = 10, reverse = F)
# Pop-up message
pu_message.acs <- paste0(counties.acs$NAME.x,
" <br>Percentage holding Bachelor's Degree: ",
counties.acs$percent_bach
)
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$percent_bach),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~percent_bach,
title = "Bachelor's degree attainment (percentage)<br>for the Population 25 and over, 2016",
opacity = 1) %>%
addScaleBar()
#acs.data$NAME.full <- acs.data$NAME
#acs.data <- subset(acs.data, select=-c(NAME))
# Check that all counties are only present once
nrow(filter(summarize(group_by(percent.bachelors, NAME), n=n()), n>1))==0
#EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER (Bachelor's Degree)
filter(vars, name=="B15003_022")$concept
get_acs(geography = "county", variables = "B15003_022")
acs.data <- get_acs(dataset="acs", geography = "county", year=2016, variables = c("B15003_001","B15003_022"))#, GEOID, NAME, estimate)
# Percent bachelor
percent.bachelors <- acs.data %>%
group_by(GEOID) %>%  # return only one row per GEOID
mutate(bach_est = estimate[variable == "B15003_022"],  # extract and rename number of people that have achieved a bachelor's
bach_tot = estimate[variable == "B15003_001"],  # extract and rename total number of people surveyed
percent_bach = round((bach_est/bach_tot)*100,2)) %>%   # multiply by 100 to get rate as a percentage
select(GEOID, NAME, bach_est, bach_tot, percent_bach) %>%
unique()
#acs.data$NAME.full <- acs.data$NAME
#acs.data <- subset(acs.data, select=-c(NAME))
# Check that all counties are only present once
nrow(filter(summarize(group_by(percent.bachelors, NAME), n=n()), n>1))==0
head(percent.bachelors)
source('~/.active-rstudio-document', echo=TRUE)
#install.packages('tidyselect')
#install.packages('tidyverse')
#install.packages('sf')
#install.packages('tidycensus')
#install.packages('leaflet')
library(tidyverse)
library(sf)
library(tidycensus)
library(leaflet)
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
library(dplyr)
library(ggplot2)
obesity <- read.csv(url("https://raw.githubusercontent.com/HimesGroup/BMIN503/master/DataFiles/county_obesity_prevalence.csv"), stringsAsFactors = FALSE)
obesity$age.adjusted.percent.2004 <- as.double(obesity$age.adjusted.percent.2004)
obesity$age.adjusted.percent.2014 <- as.double(obesity$age.adjusted.percent.2014)
counties <- readRDS(gzcon(url("https://raw.githubusercontent.com/HimesGroup/BMIN503/master/DataFiles/uscounties_2010.rds")))
counties$GEO_ID <- as.character(counties$GEO_ID)
counties.geo <- st_geometry(counties)
plot(counties.geo)
leading_num <- "0500000US"
# OJ county, CA
cali.oj <- filter(obesity, state=="California", county=="Orange County")
cali.oj.geoid <- paste(leading_num, formatC(select(cali.oj, fips.code), width=5, format="d", flag="0"), sep="")
# OJ county, TX
texa.oj <- filter(obesity, state=="Texas", county=="Orange County")
texa.oj.geoid <- paste(leading_num, formatC(select(texa.oj, fips.code), width=5, format="d", flag="0"), sep="")
# BRFSS
cali.oj
texa.oj
# County Polygons
# I know the NAME is overkill, just showing that its 'mappable' from dataset to dataset
filter(counties, GEO_ID==cali.oj.geoid, NAME=="Orange")
filter(counties, GEO_ID==texa.oj.geoid, NAME=="Orange")
# Adding GeoID column to obesity
GEOID_format_func <- function(x) paste(leading_num, formatC(x, width=5, format="d", flag="0"), sep="")
obesity$GEO_ID <- as.character(lapply(obesity$fips.code, GEOID_format_func))
counties_merged <- left_join(counties, select(obesity, state, GEO_ID, age.adjusted.percent.2004, age.adjusted.percent.2014, county))
library(RColorBrewer)
# Use a fixed color scale to more easily and compare obesity rates between maps
prev_min <- min(pmin(counties_merged$age.adjusted.percent.2004,counties_merged$age.adjusted.percent.2014),na.rm=T)
prev_max <- max(pmax(counties_merged$age.adjusted.percent.2004, counties_merged$age.adjusted.percent.2014),na.rm=T)
my_theme <- function() {
theme_minimal() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_line(color = "white"),
legend.key.size = unit(0.8, "cm"),
legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
plot.title = element_text(size = 22))
}
myPalette <- colorRampPalette(brewer.pal(9, "YlOrRd"))
# Replace "..." with your code
ggplot() +
ggtitle("2004 Obesity Rates") +
geom_sf(data = counties_merged, aes(fill = as.numeric(age.adjusted.percent.2004)), lwd = 0) +
my_theme() +
scale_fill_gradientn(name = "Obesity rate (%)", colours = myPalette(100),
limit = range(prev_min, prev_max))
ggplot() +
ggtitle("2014 Obesity Rates") +
geom_sf(data = counties_merged, aes(fill = as.numeric(age.adjusted.percent.2014)), lwd = 0) +
my_theme() +
scale_fill_gradientn(name = "Obesity rate (%)", colours = myPalette(100),
limit = range(prev_min, prev_max))
counties_merged$age.adjusted.percent.change <- (counties_merged$age.adjusted.percent.2014 - counties_merged$age.adjusted.percent.2004)
library(leaflet)
# Bins continuous variables into an ordinal color scale appropriate for our data
pal_fun <- colorBin(palette = brewer.pal(9, "RdBu")[c(1:5, 7)],
bins = c(-3, -1, 1, 5, 9, 13, 17), reverse = TRUE,
NULL)
# Pop-up message
pu_message <- paste0(counties_merged$county,
", ",
counties_merged$state,
" <br>Change in obesity rate (2004-2014): ",
round(counties_merged$age.adjusted.percent.change, 1),
"%"
)
leaflet(counties_merged) %>%
addPolygons(stroke = FALSE,
fillColor = ~pal_fun(age.adjusted.percent.change),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun,
values=~age.adjusted.percent.change,
title = 'Obesity % change',
opacity = 1) %>%
addScaleBar()
census_api_key("955a82713a4dbf05229b834cc070c79fcc5acb04", install=TRUE, overwrite=TRUE)
readRenviron("~/.Renviron")
vars <- load_variables(year = 2016, "acs5")
#EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER (Bachelor's Degree)
filter(vars, name=="B15003_022")$concept
get_acs(geography = "county", variables = "B15003_022")
acs.data <- get_acs(dataset="acs", geography = "county", year=2016, variables = c("B15003_001","B15003_022"))#, GEOID, NAME, estimate)
# Percent bachelor
percent.bachelors <- acs.data %>%
group_by(GEOID) %>%  # return only one row per GEOID
mutate(bach_est = estimate[variable == "B15003_022"],  # extract and rename number of people that have achieved a bachelor's
bach_tot = estimate[variable == "B15003_001"],  # extract and rename total number of people surveyed
percent_bach = round((bach_est/bach_tot)*100,2)) %>%   # multiply by 100 to get rate as a percentage
select(GEOID, NAME, bach_est, bach_tot, percent_bach) %>%
unique()
#acs.data$NAME.full <- acs.data$NAME
#acs.data <- subset(acs.data, select=-c(NAME))
# Check that all counties are only present once
nrow(filter(summarize(group_by(percent.bachelors, NAME), n=n()), n>1))==0
head(percent.bachelors)
# Paste the leading num to my geo ids
percent.bachelors$GEO_ID <- as.character(paste(leading_num, percent.bachelors$GEOID, sep=""))
counties.acs <- right_join(
percent.bachelors,
counties,
by="GEO_ID"
)
head(counties.acs)
pal_fun.acs <- colorQuantile(palette = "BrBG", domain=counties.acs$percent_bach, n = 10, reverse = F)
# Pop-up message
pu_message.acs <- paste0(counties.acs$NAME.x,
" <br>Percentage holding Bachelor's Degree: ",
counties.acs$percent_bach
)
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$percent_bach),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~percent_bach,
title = "Bachelor's degree attainment (percentage)<br>for the Population 25 and over, 2016",
opacity = 1) %>%
addScaleBar()
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
#install.packages('tidyselect')
#install.packages('tidyverse')
#install.packages('sf')
#install.packages('tidycensus')
#install.packages('leaflet')
library(tidyverse)
#install.packages('tidyselect')
#install.packages('tidyverse')
#install.packages('sf')
#install.packages('tidycensus')
#install.packages('leaflet')
library(tidyverse)
library(sf)
library(tidycensus)
library(leaflet)
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
install.packages("RSQLite")
install.packages("dplyr")
install.packages("BiocManager")
BiocManager::install("mygene")
#install.packages("RSQLite")
#install.packages("dplyr")
#install.packages("BiocManager")
#BiocManager::install("mygene")
library(dplyr)
library(DBI)
library(mygene)
#install.packages("RSQLite")
#install.packages("dplyr")
#install.packages("BiocManager")
BiocManager::install("mygene")
library(dplyr)
library(DBI)
library(mygene)
#install.packages("RSQLite")
#install.packages("dplyr")
#install.packages("BiocManager")
#BiocManager::install("mygene")
install.packages("AnnnotationDbi")
library(dplyr)
library(DBI)
library(mygene)
#install.packages("RSQLite")
#install.packages("dplyr")
#install.packages("BiocManager")
#BiocManager::install("mygene")
install.packages("AnnnotationDbi")
#install.packages("RSQLite")
#install.packages("dplyr")
#install.packages("BiocManager")
#BiocManager::install("mygene")
BiocManager::install("topGO")
browseVignettes("mygene")
gene <- query("9006323", fields="all")
browseVignettes("mygene")
#gene <- query("9006323", fields="all")
con <- dbConnect(RSQLite::SQLite(),dbname="D:/GitHub/BMIN503_Final_Project/protein_training.db")
library("RSQlite")
library(RSQlite)
install.packages("RSQLite")
install.packages("RSQLite")
browseVignettes("mygene")
#gene <- query("9006323", fields="all")
con <- dbConnect(RSQLite::SQLite(),dbname="D:/GitHub/BMIN503_Final_Project/protein_training.db")
dbListTables(con)
y = dbGetQuery(con, "SELECT * FROM amyloid")
train_sample <- dbGetQuery(con, "SELECT * FROM train ORDER BY RANDOM() LIMIT 10")
dbDisconnect(con)
table(y$amyloid)
#install.packages("dplyr")
#install.packages("BiocManager")
#BiocManager::install("mygene")
BiocManager::install("biomaRt")
library(biomaRt)
#install.packages("RSQLite")
#install.packages("dplyr")
#install.packages("BiocManager")
#BiocManager::install("biomaRt")
library(dplyr)
#install.packages("RSQLite")
#install.packages("dplyr")
#install.packages("BiocManager")
#BiocManager::install("biomaRt")
install.packages("Rcpp")
library(dplyr)
library(DBI)
library(mygene)#
library(mygene)#
library(RSQlite)
install.packages("RSQLite")
#install.packages("dplyr")
#install.packages("BiocManager")
#BiocManager::install("biomaRt")
#install.packages("Rcpp")
library(dplyr)
library(DBI)
library(mygene)#
install.packages("RSQLite")
