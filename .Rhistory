pal=pal_fun,
values=~age.adjusted.percent.change,
title = 'Poverty rate',
opacity = 1) %>%
addScaleBar()
leaflet(counties_merged) %>%
addPolygons(stroke = FALSE,
fillColor = ~pal_fun(age.adjusted.percent.change),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun,
values=~age.adjusted.percent.change,
title = 'Obesity % change',
opacity = 1) %>%
addScaleBar()
pal_fun.acs <- colorQuantile(palette = "BuPu", domain=counties.acs$estimate, n = 5, reverse = T)
# Pop-up message
pu_message.acs <- paste0(counties.acs$NAME.x,
" <br>Estimate holding Bachelor's Degree: ",
counties.acs$estimate
)
leaflet(counties.acs) %>%
addPolygons(fillColor = ~pal_fun(estimate), # addPolygons requires variable and a pass to a palette function
popup = pu_message.acs) %>%                # add a popup message
addTiles()
counties.acs <- right_join(
select(acs.data, GEO_ID, estimate, NAME.full),
counties,
by="GEO_ID"
)
pal_fun.acs <- colorQuantile(palette = "BuPu", domain=counties.acs$estimate, n = 5, reverse = T)
leaflet(counties.acs) %>%
addPolygons(fillColor = ~pal_fun(estimate), # addPolygons requires variable and a pass to a palette function
popup = pu_message.acs) %>%                # add a popup message
addTiles()
View(counties.acs)
View(counties_merged)
leaflet(counties_merged) %>%
addPolygons(stroke = TRUE,
fillColor = ~pal_fun(age.adjusted.percent.change),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun,
values=~age.adjusted.percent.change,
title = 'Obesity % change',
opacity = 1) %>%
addScaleBar()
leaflet(counties_merged) %>%
addPolygons(stroke = TRUE,
fillColor = ~pal_fun(age.adjusted.percent.change),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun,
values=~age.adjusted.percent.change,
title = 'Obesity % change',
opacity = 1) %>%
addScaleBar()
leaflet(counties_merged) %>%
addPolygons(stroke = FALSE,
fillColor = ~pal_fun(age.adjusted.percent.change),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun,
values=~age.adjusted.percent.change,
title = 'Obesity % change',
opacity = 1) %>%
addScaleBar()
leaflet(counties.acs) %>%
addPolygons(data=counties.acs$geometry,
fillColor = ~pal_fun(estimate), # addPolygons requires variable and a pass to a palette function
popup = pu_message.acs) %>%                # add a popup message
addTiles()
leaflet(counties.acs) %>%
addPolygons(data=counties.geo,
fillColor = ~pal_fun(estimate), # addPolygons requires variable and a pass to a palette function
popup = pu_message.acs) %>%                # add a popup message
addTiles()
leaflet(counties.acs) %>%
addPolygons(data=counties.acs$geometry,
fillColor = ~pal_fun(estimate), # addPolygons requires variable and a pass to a palette function
popup = pu_message.acs) %>%                # add a popup message
addTiles()
leaflet(counties.acs) %>%
addPolygons(data=counties.acs,
fillColor = ~pal_fun(estimate), # addPolygons requires variable and a pass to a palette function
popup = pu_message.acs) %>%                # add a popup message
addTiles()
leaflet(counties.acs) %>%
addPolygons(fillColor = ~pal_fun(estimate), # addPolygons requires variable and a pass to a palette function
popup = pu_message.acs) %>%                # add a popup message
addTiles()
leaflet(counties.geo) %>%
addPolygons(fillColor = ~pal_fun(estimate), # addPolygons requires variable and a pass to a palette function
popup = pu_message.acs) %>%                # add a popup message
addTiles()
leaflet(counties) %>%
addPolygons(fillColor = ~pal_fun(estimate), # addPolygons requires variable and a pass to a palette function
popup = pu_message.acs) %>%                # add a popup message
addTiles()
leaflet(counties) %>%
addPolygons(fillColor = ~pal_fun(counties.acs$estimate), # addPolygons requires variable and a pass to a palette function
popup = pu_message.acs) %>%                # add a popup message
addTiles()
leaflet(counties) %>%
addPolygons(fillColor = ~pal_fun(counties.acs$estimate), # addPolygons requires variable and a pass to a palette function
stroke=FALSE<
popup = pu_message.acs) %>%                # add a popup message
leaflet(counties) %>%
addPolygons(fillColor = ~pal_fun(counties.acs$estimate), # addPolygons requires variable and a pass to a palette function
stroke=FALSE,
popup = pu_message.acs) %>%                # add a popup message
addTiles()
leaflet(counties) %>%
addPolygons(
stroke = TRUE,
fillColor = ~pal_fun(estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun,
values=~estimate,
title = 'Educational Attainment for the Population 25 and over, 2016',
opacity = 1) %>%
addScaleBar()
stroke = TRUE,
leaflet(counties) %>%
addPolygons(
stroke = TRUE,
fillColor = ~pal_fun(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun,
values=~counties.acs$estimate,
title = 'Educational Attainment for the Population 25 and over, 2016',
opacity = 1) %>%
addScaleBar()
leaflet(counties) %>%
addPolygons(stroke = FALSE,
fillColor = ~pal_fun(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun,
values=~counties.acs$estimate,
title = 'Educational Attainment for the Population 25 and over, 2016',
opacity = 1) %>%
addScaleBar()
# Pop-up message
pu_message.acs <- paste0(counties.acs$NAME.full,
" <br>Estimate holding Bachelor's Degree: ",
counties.acs$estimate
)
leaflet(counties) %>%
addPolygons(stroke = FALSE,
fillColor = ~pal_fun(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun,
values=~counties.acs$estimate,
title = 'Educational Attainment for the Population 25 and over, 2016',
opacity = 1) %>%
addScaleBar()
pal_fun.acs <- colorQuantile(palette = "BuPu", domain=counties.acs$estimate, n = 5, reverse = T)
# Pop-up message
pu_message.acs <- paste0(counties.acs$NAME.full,
" <br>Estimate holding Bachelor's Degree: ",
counties.acs$estimate
)
leaflet(counties) %>%
addPolygons(stroke = FALSE,
fillColor = ~pal_fun(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~counties.acs$estimate,
title = 'Educational Attainment for the Population 25 and over, 2016',
opacity = 1) %>%
addScaleBar()
leaflet(counties.acs) %>%
addPolygons(stroke = FALSE,
fillColor = ~pal_fun(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~counties.acs$estimate,
title = 'Educational Attainment for the Population 25 and over, 2016',
opacity = 1) %>%
addScaleBar()
leaflet(counties.acs$geometry) %>%
addPolygons(stroke = FALSE,
fillColor = ~pal_fun(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~counties.acs$estimate,
title = 'Educational Attainment for the Population 25 and over, 2016',
opacity = 1) %>%
addScaleBar()
leaflet(counties.acs) %>%
addPolygons(stroke = FALSE,
fillColor = ~pal_fun(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~counties.acs$estimate,
title = 'Educational Attainment for the Population 25 and over, 2016',
opacity = 1) %>%
addScaleBar()
leaflet(counties.acs) %>%
addPolygons(data=counties.acs$geometry,
stroke = FALSE,
fillColor = ~pal_fun(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~counties.acs$estimate,
title = 'Educational Attainment for the Population 25 and over, 2016',
opacity = 1) %>%
addScaleBar()
leaflet(counties.acs) %>%
addPolygons(data=counties.acs$geometry,
stroke = FALSE,
fillColor = ~pal_fun(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~counties.acs$estimate,
title = 'Educational Attainment for the Population 25 and over, 2016',
opacity = 1) %>%
addScaleBar()
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~counties.acs$estimate,
title = 'Educational Attainment for the Population 25 and over, 2016',
opacity = 1) %>%
addScaleBar()
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~counties.acs$estimate,
title = 'Educational Attainment for the Population 25 and over, 2016',
opacity = 1) %>%
addScaleBar()
pal_fun.acs <- colorQuantile(palette = "PiYG", domain=counties.acs$estimate, n = 5, reverse = T)
# Pop-up message
pu_message.acs <- paste0(counties.acs$NAME.full,
" <br>Estimate holding Bachelor's Degree: ",
counties.acs$estimate
)
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~counties.acs$estimate,
title = 'Educational Attainment for the Population 25 and over, 2016',
opacity = 1) %>%
addScaleBar()
pal_fun.acs <- colorQuantile(palette = "PiYG", domain=counties.acs$estimate, n = 5, reverse = F)
# Pop-up message
pu_message.acs <- paste0(counties.acs$NAME.full,
" <br>Estimate holding Bachelor's Degree: ",
counties.acs$estimate
)
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~counties.acs$estimate,
title = 'Educational Attainment for the Population 25 and over, 2016',
opacity = 1) %>%
addScaleBar()
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~counties.acs$estimate,
title = "Bachelor's degree attainment<br>for the Population 25 and over, 2016",
opacity = 1) %>%
addScaleBar()
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~estimate,
title = "Bachelor's degree attainment<br>for the Population 25 and over, 2016",
opacity = 1) %>%
addScaleBar()
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~estimate,
title = "Bachelor's degree attainment<br>for the Population 25 and over, 2016",
opacity = 1) %>%
addScaleBar()
pal_fun.acs <- colorNumeric(palette = "PiYG", domain=counties.acs$estimate, n = 5, reverse = F)
# Pop-up message
pu_message.acs <- paste0(counties.acs$NAME.full,
" <br>Estimate holding Bachelor's Degree: ",
counties.acs$estimate
)
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~estimate,
title = "Bachelor's degree attainment<br>for the Population 25 and over, 2016",
opacity = 1) %>%
addScaleBar()
leaflet(count
leaflet(counties.acs) %>%
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~estimate,
title = "Bachelor's degree attainment<br>for the Population 25 and over, 2016",
opacity = 1) %>%
addScaleBar()
pal_fun.acs <- colorBin(palette = "PiYG", domain=counties.acs$estimate, n = 5, reverse = F)
# Pop-up message
pu_message.acs <- paste0(counties.acs$NAME.full,
" <br>Estimate holding Bachelor's Degree: ",
counties.acs$estimate
)
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~estimate,
title = "Bachelor's degree attainment<br>for the Population 25 and over, 2016",
opacity = 1) %>%
addScaleBar()
pal_fun.acs <- colorQuantile(palette = "PiYG", domain=counties.acs$estimate, n = 5, reverse = F)
pal_fun.acs <- colorQuantile(palette = "PiYG", domain=counties.acs$estimate, n = 5, reverse = F)
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~estimate,
title = "Bachelor's degree attainment<br>for the Population 25 and over, 2016",
opacity = 1) %>%
addScaleBar()
pal_fun.acs <- colorQuantile(palette = "PiYG", domain=counties.acs$estimate, n = 10, reverse = F)
# Pop-up message
pu_message.acs <- paste0(counties.acs$NAME.full,
" <br>Estimate holding Bachelor's Degree: ",
counties.acs$estimate
)
leaflet(counties.acs) %>%
addPolygons(data=counties,
stroke = FALSE,
fillColor = ~pal_fun.acs(counties.acs$estimate),
fillOpacity = 0.5, smoothFactor = 0.5,
popup = pu_message.acs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright",
pal=pal_fun.acs,
values=~estimate,
title = "Bachelor's degree attainment<br>for the Population 25 and over, 2016",
opacity = 1) %>%
addScaleBar()
library(dplyr)
install.packages("RSQLite")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(DBI)
con <- dbConnect(RSQLite::SQLite())
dbListTables(con)
con <- dbConnect(RSQLite::SQLite(),dbname="D:\GitHub\BMIN503_Final_Project\protein_training.db")
con <- dbConnect(RSQLite::SQLite(),dbname="D:/GitHub/BMIN503_Final_Project/protein_training.db")
dbListTables(con)
train_sample <- dbGetQuery(con, "SELECT * FROM train ORDER BY RAND() LIMIT 10")
train_sample <- dbGetQuery(con, "SELECT * FROM train ORDER BY RANDOM() LIMIT 10")
View(train_sample)
con <- dbConnect(RSQLite::SQLite(),dbname="D:/GitHub/BMIN503_Final_Project/protein_training.db")
dbListTables(con)
train_sample <- dbGetQuery(con, "SELECT * FROM train ORDER BY RANDOM() LIMIT 10")
dbDisconnect()
dbDisconnect()
dbDisconnect(con)
con <- dbConnect(RSQLite::SQLite(),dbname="D:/GitHub/BMIN503_Final_Project/protein_training.db")
dbListTables(con)
y = dbGetQuery(con, "SELECT * FROM amyloid")
train_sample <- dbGetQuery(con, "SELECT * FROM train ORDER BY RANDOM() LIMIT 10")
dbDisconnect(con)
View(y)
summarize(y)
table(y)
table(y$amyloid)
install.packages("RSQLite")
install.packages("dplyr")
install.packages("BiocManager")
install.packages("RSQLite")
install.packages("dplyr")
library(dplyr)
library(DBI)
library(mygene)
library(mygene)
install.packages("BiocManager")
library(mygene)
biocLite("mygene")
BiocManager::install("mygene")
install.packages("RSQLite")
install.packages("dplyr")
install.packages("BiocManager")
BiocManager::install("mygene")
library(dplyr)
library(DBI)
library(mygene)
con <- dbConnect(RSQLite::SQLite(),dbname="D:/GitHub/BMIN503_Final_Project/protein_training.db")
dbListTables(con)
y = dbGetQuery(con, "SELECT * FROM amyloid")
train_sample <- dbGetQuery(con, "SELECT * FROM train ORDER BY RANDOM() LIMIT 10")
library(dplyr)
library(DBI)
library(mygene)
browseVignettes("mygene")
gene <- getGene("STEA1_HUMAN", fields="all")
gene <- query("STEA1_HUMAN", fields="all")
View(gene)
gene <- query("PO1236", fields="all")
View(gene)
gene <- query("P01236", fields="all")
View(gene)
gene <- query("9006323", fields="all")
View(gene)
